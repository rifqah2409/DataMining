# -*- coding: utf-8 -*-
"""DecisionTree IrisCV.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wDu55QB6g7sAprHi8LSeOK2QslupZC-g

Nur Rifqah Fakhirah (A11.2019.12178)
"""

import numpy as np
import pandas as pd
from sklearn import tree

# Membaca Dataset dari File ke Pandas dataFrame
irisDataset= pd.read_csv('Dataset Iris.csv', delimiter=';', header=0)

irisDataset.head()

# Mengubah kelas (kolom "Species") dari String ke Unique-Integer
irisDataset["Species"] = pd.factorize(irisDataset.Species)[0]

irisDataset.head()

print(irisDataset)

# Menghapus kolom "Id"
irisDataset = irisDataset.drop(labels="Id", axis=1)

print(irisDataset)

# Mengubah dataFrame ke array numpy
irisDataset = irisDataset.to_numpy()

print(irisDataset)

# Membagi Dataset => 80 baris data untuk training dan 20 baris data untuk testing
dataTraining = np.concatenate((irisDataset[0:40, :], irisDataset[50:90, :]),
                              axis=0)
dataTesting = np.concatenate((irisDataset[40:50, :], irisDataset[90:100, :]),
                             axis=0)

print(dataTraining)
len(dataTraining)

print(dataTesting)
len(dataTesting)

# Memecah Dataset ke Input dan Label
inputTraining = dataTraining[:, 0:4]
inputTesting = dataTesting[:, 0:4]
labelTraining = dataTraining[:, 4]
labelTesting = dataTesting[:, 4]
print(labelTraining)
len(labelTraining)

# Mendefinisikan Decision Tree Classifier
model = tree.DecisionTreeClassifier()

# Mentraining model
model = model.fit(inputTraining, labelTraining)

# Memprediksi input data testing
hasilPrediksi = model.predict(inputTesting)
print("Label Sebenarnya : ", labelTesting)
print("Hasil Prediksi : ", hasilPrediksi)

# Menghitung Akurasi
prediksiBenar = (hasilPrediksi == labelTesting).sum()
prediksiSalah = (hasilPrediksi != labelTesting).sum()
print("Predikisi Benar :", prediksiBenar, "data")
print("Predikisi Salah :", prediksiSalah, "data")
print("Akurasi =", prediksiBenar/(prediksiBenar+prediksiSalah) * 100, "%")